{"ast":null,"code":"const getLocalTimestamp = () => {\n  const currentTime = new Date();\n  const date = currentTime.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  });\n  const time = currentTime.toLocaleTimeString('en-US', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  return `${date} ${time}`; // Local date and time in 'MM/DD/YYYY HH:MM:SS' format\n};\nconst log = (methodName, messageType, statusCode, message) => {\n  const timeStamp = getLocalTimestamp(); // Use the custom local timestamp\n\n  const logMessage = `[${timeStamp}] - [${methodName}] [${messageType}] [${statusCode}] ${message}`;\n\n  // Log the message to the console\n  console.log(logMessage);\n\n  // Optionally: Send the log message to a file or database\n  fetch('/api/log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      methodName,\n      messageType,\n      statusCode,\n      message,\n      timeStamp\n    })\n  }).catch(error => {\n    console.error('Failed to send log:', error);\n  });\n};\nexport default log;","map":{"version":3,"names":["getLocalTimestamp","currentTime","Date","date","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour12","hour","minute","second","log","methodName","messageType","statusCode","message","timeStamp","logMessage","console","fetch","method","headers","body","JSON","stringify","catch","error"],"sources":["E:/companyitpolicymodule/src/log.js"],"sourcesContent":["const getLocalTimestamp = () => {\r\n    const currentTime = new Date();\r\n    \r\n    const date = currentTime.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n    });\r\n\r\n    const time = currentTime.toLocaleTimeString('en-US', {\r\n        hour12: false,\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n    });\r\n\r\n    return `${date} ${time}`;  // Local date and time in 'MM/DD/YYYY HH:MM:SS' format\r\n};\r\n\r\nconst log = (methodName, messageType, statusCode, message) => {\r\n    const timeStamp = getLocalTimestamp();  // Use the custom local timestamp\r\n\r\n    const logMessage = `[${timeStamp}] - [${methodName}] [${messageType}] [${statusCode}] ${message}`;\r\n\r\n    // Log the message to the console\r\n    console.log(logMessage);\r\n\r\n    // Optionally: Send the log message to a file or database\r\n    fetch('/api/log', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ methodName, messageType, statusCode, message, timeStamp }),\r\n    })\r\n    .catch(error => {\r\n        console.error('Failed to send log:', error);\r\n    });\r\n};\r\n\r\nexport default log;\r\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAE9B,MAAMC,IAAI,GAAGF,WAAW,CAACG,kBAAkB,CAAC,OAAO,EAAE;IACjDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAGP,WAAW,CAACQ,kBAAkB,CAAC,OAAO,EAAE;IACjDC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACZ,CAAC,CAAC;EAEF,OAAO,GAAGV,IAAI,IAAIK,IAAI,EAAE,CAAC,CAAE;AAC/B,CAAC;AAED,MAAMM,GAAG,GAAGA,CAACC,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,KAAK;EAC1D,MAAMC,SAAS,GAAGnB,iBAAiB,CAAC,CAAC,CAAC,CAAE;;EAExC,MAAMoB,UAAU,GAAG,IAAID,SAAS,QAAQJ,UAAU,MAAMC,WAAW,MAAMC,UAAU,KAAKC,OAAO,EAAE;;EAEjG;EACAG,OAAO,CAACP,GAAG,CAACM,UAAU,CAAC;;EAEvB;EACAE,KAAK,CAAC,UAAU,EAAE;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEZ,UAAU;MAAEC,WAAW;MAAEC,UAAU;MAAEC,OAAO;MAAEC;IAAU,CAAC;EACpF,CAAC,CAAC,CACDS,KAAK,CAACC,KAAK,IAAI;IACZR,OAAO,CAACQ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC/C,CAAC,CAAC;AACN,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}